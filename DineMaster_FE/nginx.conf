#Global configuration
# /etc/nginx/nginx.conf
user nginx;
worker_processes auto;
# Error log file location
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    #this define that a single worker process can handle up to 1024 conneconnections/processetions. the number of workers depends on the number of CPUs (1 worker per CPU) because in the global setting we have set the worker_process to be "auto"
    worker_connections 1024;
}

http {
    #Includes all the MIME ypes of all .html,.css,.jsx files
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

#Here I define what information is logged for each client request (default)
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

#remote_addr = the IP address of the client making the request (ex: 192.168.1.1)
#remote_user = adds the header for the authentication
#time_local = the time when the request was received
#request = the type of http method (GET,POST,PUT,DELETE)
#status = the status code (200,404,500)
#body_bytes_sent = size of the body in bytes
#http_referer = the url of the page where the call was made from
#http_user_agent = the user agent of the browser (Mozila, Safari)

#these logs help me monitor all requests made and its good for sequiry reasons, monitoring and debuggin

#all the data is stored here
    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

#Includes all configuration files in the /etc/nginx/conf.d/ directory
    include /etc/nginx/conf.d/*.conf;

    #Server block
    server {
        listen 80;

        # Serve static files from /usr/share/nginx/html
        location / {
            root /usr/share/nginx/html; #specifies the directory to serve static files from.
            index index.html; #sets the default file to serve if no specific file is requested.
            try_files $uri /index.html; #serves the requested file if it exists; otherwise, it falls back to index.html. This is important for single-page applications (SPAs).
        }

        # Proxy API requests to the backend
        location /api/ {
            proxy_pass http://localhost:8080; #where to forward the requests
            proxy_http_version 1.1; #the type of communication http/1.1
            proxy_set_header Upgrade $http_upgrade; 
            proxy_set_header Connection 'upgrade'; # i need this so that the connection can be upgraded for websockets
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade; #prevents caching during websocket communication
        }
    }
}
